@using System.Text.Json
@using WeldingPassportsApp.Stores;
@using Microsoft.AspNetCore.Mvc;
@inject RoleManager<AppRole> _roleManager;
@inject UserManager<AppUser> _userManager;
@model CompanyContactEditViewModel

@{
    ViewData["Title"] = @Localizer["Edit Contact"];
    string returnUrl = ViewBag.ReturnUrl;
    string currentUrl = ViewBag.CurrentUrl;

    AppRole appRole = new AppRole();
    if(Model.AppRoleID != null)
    {
        appRole = await _roleManager.FindByIdAsync(Model.AppRoleID);
    }
    var adminUsers = await _userManager.GetUsersInRoleAsync(RolesStore.Admin);

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.ContactID)))
        if (TempData[nameof(CompanyContactEditViewModel.ContactID)] != null)
            Model.ContactID = (int) TempData[nameof(CompanyContactEditViewModel.ContactID)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.CompanyID)))
        Model.CompanyID = (int?) TempData[nameof(CompanyContactEditViewModel.CompanyID)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.JobTitle)))
        Model.JobTitle = (string) TempData[nameof(CompanyContactEditViewModel.JobTitle)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.BusinessPhone)))
        Model.BusinessPhone = (string) TempData[nameof(CompanyContactEditViewModel.BusinessPhone)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.MobilePhone)))
        Model.MobilePhone = (string) TempData[nameof(CompanyContactEditViewModel.MobilePhone)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.Email)))
        Model.Email = (string) TempData[nameof(CompanyContactEditViewModel.Email)];

    if (TempData.ContainsKey(nameof(CompanyContactEditViewModel.AddressID)))
        Model.AddressID = (int?)TempData[nameof(CompanyContactEditViewModel.AddressID)];

    bool userCanEditContacts = User.CanEdit(ClaimsTypesStore.Contacts);
    bool userCanCreateContacts = User.CanCreate(ClaimsTypesStore.Contacts);
    bool userCanEditCompanies = User.CanEdit(ClaimsTypesStore.Companies);
    bool userCanCreateCompanies = User.CanCreate(ClaimsTypesStore.Companies);
    bool userCanEditAddresses = User.CanEdit(ClaimsTypesStore.Addresses);
    bool userCanCreateAddresses = User.CanCreate(ClaimsTypesStore.Addresses);
}

<h1>@Localizer["Edit Contact"]</h1>
<hr />
<form asp-action="@nameof(CompanyContactsController.Edit)" asp-controller="@typeof(CompanyContactsController).GetNameOfController()" 
      asp-route-returnUrl="@returnUrl" asp-route-currentUrl="@currentUrl" method="post" onsubmit="PrepareFormOnsubmit()">
    <input asp-for="EncryptedID" title="@nameof(Model.EncryptedID)" placeholder="@nameof(Model.EncryptedID)" hidden />
    <div class="form-group row mb-3">
        <label asp-for="ContactID" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10 align-self-center">
            <div class="input-group">
                <select asp-for="ContactID" class="form-control align-self-center" asp-items="@Model.ContactSelectList">
                    <option value="" selected disabled hidden>@Localizer["Choose a Contact"]</option>
                </select>
                @if (userCanEditContacts || userCanCreateContacts)
                {
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" onclick="ActionDisableEdit('@CompanyContactIDStore.GetContactEditBtnID')">
                        @Localizer["Action"]
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        @if (userCanEditContacts)
                        {
                            <li><button class="dropdown-item" type="submit" name="submit" value="@CompanyContactIDStore.GetContactEditBtnID" id="@CompanyContactIDStore.GetContactEditBtnID" style="width:auto">@Localizer["Edit"]</button></li>
                        }
                        @if (userCanCreateContacts)
                        {
                            <li><a class="dropdown-item" asp-controller="@typeof(ContactsController).GetNameOfController()" asp-action="@nameof(ContactsController.Create)" asp-route-returnUrl="@currentUrl">@Localizer["Create"]</a></li>
                        }
                    </ul>
                }
                <input class="btn btn-primary" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#ContactID'))" />
            </div>
            <span asp-validation-for="ContactID" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row mb-3">
        <label asp-for="CompanyID" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10 align-self-center">
            <div class="input-group">
                <select asp-for="CompanyID" class="form-control align-self-center" asp-items="@Model.CompanySelectList">
                    <option value="" selected disabled hidden>@Localizer["Choose a Company"]</option>
                </select>
                @if (userCanEditCompanies || userCanCreateCompanies)
                {
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" onclick="ActionDisableEdit('@CompanyContactIDStore.GetCompanyEditBtnID')">
                        @Localizer["Action"]
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        @if(userCanEditCompanies)
                        {
                            <li><button type="submit" name="submit" value="@CompanyContactIDStore.GetCompanyEditBtnID" id="@CompanyContactIDStore.GetCompanyEditBtnID" class="dropdown-item" style="width:auto">@Localizer["Edit"]</button></li>
                        }
                        @if (userCanCreateCompanies)
                        {
                            <li><a class="dropdown-item" type="button" asp-controller="@typeof(CompaniesController).GetNameOfController()" asp-action="@nameof(CompaniesController.Create)" asp-route-returnUrl="@currentUrl">@Localizer["Create"]</a></li>
                        }
                    </ul>
                }
                <input class="btn btn-primary" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#CompanyID'))" />
            </div>
            <span asp-validation-for="CompanyID" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row mb-3">
        <label asp-for="JobTitle" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="align-self-center">
                <input asp-for="JobTitle" class="form-control" placeholder=@Localizer["Job Title"] />
            </div>
            <span asp-validation-for="JobTitle" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row mb-3">
        <label asp-for="BusinessPhone" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="align-self-center">
                <input asp-for="BusinessPhone" class="form-control" placeholder=@Localizer["Business Phone"] />
            </div>
            <span asp-validation-for="BusinessPhone" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row mb-3">
        <label asp-for="MobilePhone" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="align-self-center">
                <input asp-for="MobilePhone" class="form-control" placeholder=@Localizer["Mobile Phone"] />
            </div>
            <span asp-validation-for="MobilePhone" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group row mb-3">
        <label asp-for="Email" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="align-self-center">
                <input asp-for="Email" class="form-control" placeholder=@Localizer["Email"] />
            </div>
            <span asp-validation-for="Email" class="text-danger"></span>
        </div>
    </div>
    <h4>@Localizer["Business Address"]</h4>
    <div class="form-group row mb-3">
        <label asp-for="AddressID" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <div class="input-group align-self-center">
                <select asp-for="AddressID" class="form-control" asp-items="@Model.AddressSelectList">
                    <option value="" selected disabled hidden>@Localizer["Choose an Address"]</option>
                </select>
                @if(userCanEditAddresses || userCanCreateAddresses)
                {
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false" onclick="ActionDisableEdit('@CompanyContactIDStore.GetAddressEditBtnID')">
                        @Localizer["Action"]
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        @if(userCanEditAddresses)
                        {
                            <li><button type="submit" name="submit" value="@CompanyContactIDStore.GetAddressEditBtnID" id="@CompanyContactIDStore.GetAddressEditBtnID" class="dropdown-item" style="width:auto">@Localizer["Edit"]</button></li>
                        }
                        @if(userCanCreateAddresses)
                        {
                            <li><a class="dropdown-item" type="button" asp-controller="@typeof(AddressesController).GetNameOfController()" asp-action="@nameof(AddressesController.Create)" asp-route-returnUrl="@currentUrl">@Localizer["Create"]</a></li>
                        }
                    </ul>
                }
                <input class="btn btn-primary" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#AddressID'))" />
            </div>
            <span asp-validation-for="AddressID" class="text-danger"></span>
        </div>
    </div>
    @if (User.IsInRole(RolesStore.Admin))
    {
        <h4>@Localizer["User"]</h4>
        <div class="form-group row mb-3">
            <label asp-for="AppUserID" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <div class="input-group align-self-center">
                    @if(Model.AppRoleID == null)
                    {
                        <select asp-for="AppUserID" class="form-control" asp-items="@Model.AppUsersSelectList" onchange="OnChangeAppUserID()">
                            <option value="" selected disabled hidden>@Localizer["Choose a User"]</option>
                        </select>
                        <input class="btn btn-primary" id="AppUserIDClearButton" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#AppUserID'))" />
                    }
                    else
                    {
                        <select asp-for="AppUserID" class="form-control" asp-items="@Model.AppUsersSelectList" disabled="disabled" onchange="OnChangeAppUserID()">
                            <option value="" selected disabled hidden>@Localizer["Choose a User"]</option>
                        </select>
                        <input class="btn btn-primary" id="AppUserIDClearButton" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#AppUserID'))" disabled="disabled" />
                    }
                </div>
            </div>
        </div>
        <div class="form-group row mb-3">
            <label asp-for="AppRoleID" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <div class="input-group align-self-center">
                    @if (Model.AppUserID == null || (appRole.Name == RolesStore.Admin && adminUsers.Count() < 2))
                    {
                        <select asp-for="AppRoleID" class="form-control" asp-items="@Model.RoleNamesSelectList" disabled="disabled" onchange="OnChangeAppRoleID()">
                            <option value="" selected disabled hidden>@Localizer["Choose a Role"]</option>
                        </select>
                        <input class="btn btn-primary" id="AppRoleIDClearButton" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#AppRoleID'))" disabled="disabled" />
                    }
                    else
                    {
                        <select asp-for="AppRoleID" class="form-control" asp-items="@Model.RoleNamesSelectList" onchange="OnChangeAppRoleID()">
                            <option value="" selected disabled hidden>@Localizer["Choose a Role"]</option>
                        </select>
                        <input class="btn btn-primary" id="AppRoleIDClearButton" type="button" value="@Localizer["Clear"]" onclick="OnClickClear($('#AppRoleID'))" />
                    }
                </div>
            </div>
        </div>
    }
    <div class="form-group row">
        <div class="col-sm-12">
            <button type="submit" class="btn btn-primary" style="width:auto">@Localizer["Save"]</button>
            <a href="@returnUrl" class="btn btn-primary" style="width:auto">@Localizer["Cancel"]</a>
        </div>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/ActionBtn.js"></script>
    <script src="~/js/OnClickClear.js"></script>
    <script src="~/js/CompanyContacts/PrepareFormOnsubmit.js"></script>
    <script type="module" src="~/js/CompanyContacts/OnChangeAppUserID.js"></script>
    <script type="module" src="~/js/CompanyContacts/OnChangeAppRoleID.js"></script>
}